plot_ly(selectedData(), x = ~State, y = order~Crude.Rate, type = 'bar')
})
}
shinyApp(ui = ui, server = server)
temp <- factor(twenty.ten$State,
levels = unique(twenty.ten$State)[order(twenty.ten[twenty.ten$ICD.Chapter == "Neoplasms", 6], decreasing = TRUE)])
temp
temp <- twenty.ten %>% filter(ICD.Chapter == "Neoplasms")
head(temp)
?order
order(c( 1, 5, 3, 10))
temp$State[1]
temp$State[order(temp$Crude.Rate), descending = TRUE]
order(temp$Crude.Rate)
temp[order(temp$Crude.Rate)]
temp[order(temp$Crude.Rate),]
# Rank States
ui <- fluidPage(
headerPanel("2010 State Mortality Rankings by Cause"),
sidebarPanel(
selectInput('cod', 'Cause Of Death', unique(twenty.ten$ICD.Chapter))
),
mainPanel(
plotlyOutput('plot1'),
verbatimTextOutput('')
)
)
server <- function(input, output, session){
selectedData <- reactive({
dfSlice <- twenty.ten %>%
filter(ICD.Chapter == input$cod)
})
output$plot1 <- renderPlotly({
plot_ly(selectedData(), x = ~State, y = order~Crude.Rate, type = 'bar') %>%
layout(xaxis = twenty.ten[order(twenty.ten$Crude.Rate), 2],
decreasing = TRUE)
})
}
shinyApp(ui = ui, server = server)
temp[order(temp$Crude.Rate, decreasing = TRUE), 2]
# Rank States
ui <- fluidPage(
headerPanel("2010 State Mortality Rankings by Cause"),
sidebarPanel(
selectInput('cod', 'Cause Of Death', unique(twenty.ten$ICD.Chapter))
),
mainPanel(
plotlyOutput('plot1'),
verbatimTextOutput('')
)
)
server <- function(input, output, session){
selectedData <- reactive({
dfSlice <- twenty.ten %>%
filter(ICD.Chapter == input$cod)
})
output$plot1 <- renderPlotly({
plot_ly(selectedData(), x = ~State, y = order~Crude.Rate, type = 'bar') %>%
layout(xaxis = twenty.ten[order(twenty.ten$Crude.Rate, decreasing = TRUE), 2]
})
# Rank States
ui <- fluidPage(
headerPanel("2010 State Mortality Rankings by Cause"),
sidebarPanel(
selectInput('cod', 'Cause Of Death', unique(twenty.ten$ICD.Chapter))
),
mainPanel(
plotlyOutput('plot1'),
verbatimTextOutput('')
)
)
server <- function(input, output, session){
selectedData <- reactive({
dfSlice <- twenty.ten %>%
filter(ICD.Chapter == input$cod)
})
output$plot1 <- renderPlotly({
plot_ly(selectedData(), x = ~State, y = order~Crude.Rate, type = 'bar') %>%
layout(xaxis = twenty.ten[order(twenty.ten$Crude.Rate, decreasing = TRUE), 2])
})
}
shinyApp(ui = ui, server = server)
# Rank States
ui <- fluidPage(
headerPanel("2010 State Mortality Rankings by Cause"),
sidebarPanel(
selectInput('cod', 'Cause Of Death', unique(twenty.ten$ICD.Chapter))
),
mainPanel(
plotlyOutput('plot1'),
verbatimTextOutput('')
)
)
server <- function(input, output, session){
selectedData <- reactive({
dfSlice <- twenty.ten %>%
filter(ICD.Chapter == input$cod)
})
output$plot1 <- renderPlotly({
plot_ly(selectedData(), x = ~State, y = order~Crude.Rate, type = 'bar') %>%
layout(xaxis = twenty.ten[order(Crude.Rate, decreasing = TRUE), 2])
})
}
shinyApp(ui = ui, server = server)
# Rank States
ui <- fluidPage(
headerPanel("2010 State Mortality Rankings by Cause"),
sidebarPanel(
selectInput('cod', 'Cause Of Death', unique(twenty.ten$ICD.Chapter))
),
mainPanel(
plotlyOutput('plot1'),
verbatimTextOutput('')
)
)
server <- function(input, output, session){
selectedData <- reactive({
dfSlice <- twenty.ten %>%
filter(ICD.Chapter == input$cod)
})
output$plot1 <- renderPlotly({
plot_ly(selectedData(), x = ~State, y = order~Crude.Rate, type = 'bar') %>%
layout(xaxis = order(Crude.Rate, decreasing = TRUE))
})
}
shinyApp(ui = ui, server = server)
# Rank States
ui <- fluidPage(
headerPanel("2010 State Mortality Rankings by Cause"),
sidebarPanel(
selectInput('cod', 'Cause Of Death', unique(twenty.ten$ICD.Chapter))
),
mainPanel(
plotlyOutput('plot1'),
verbatimTextOutput('')
)
)
server <- function(input, output, session){
selectedData <- reactive({
dfSlice <- twenty.ten %>%
filter(ICD.Chapter == input$cod)
})
output$plot1 <- renderPlotly({
xform <- list(categoryorder = "array",
categoryarray = twenty.ten[order(twenty.ten$Crude.Rate == input$cod,
decreasing = TRUE), 2])
plot_ly(selectedData(), x = ~State, y = order~Crude.Rate, type = 'bar') %>%
layout(xaxis = xform)
})
}
shinyApp(ui = ui, server = server)
twenty.ten[order(twenty.ten$Crude.Rate == input$cod,
decreasing = TRUE), 2])
twenty.ten[order(twenty.ten$Crude.Rate == input$cod,
decreasing = TRUE), 2]
twenty.ten[order(twenty.ten$Crude.Rate == "Neoplasms",
decreasing = TRUE), 2]
states <- twenty.ten[twenty.ten$ICD.Chapter == "Neoplasms"]
states <- twenty.ten[twenty.ten$ICD.Chapter == "Neoplasms", 2]
states
states <- twenty.ten[twenty.ten$ICD.Chapter == "Neoplasms",]
states[order(states$Crude.Rate, decreasing == TRUE), 2]
states[order(states$Crude.Rate, decreasing = TRUE), 2]
# Rank States
ui <- fluidPage(
headerPanel("2010 State Mortality Rankings by Cause"),
sidebarPanel(
selectInput('cod', 'Cause Of Death', unique(twenty.ten$ICD.Chapter))
),
mainPanel(
plotlyOutput('plot1'),
verbatimTextOutput('')
)
)
server <- function(input, output, session){
selectedData <- reactive({
dfSlice <- twenty.ten %>%
filter(ICD.Chapter == input$cod)
})
output$plot1 <- renderPlotly({
states <- twenty.ten[twenty.ten$ICD.Chapter == input$cod,]
xform <- list(categoryorder = "array",
categoryarray = states[order(states$Crude.Rate, decreasing = TRUE), 2])
plot_ly(selectedData(), x = ~State, y = order~Crude.Rate, type = 'bar') %>%
layout(xaxis = xform)
})
}
shinyApp(ui = ui, server = server)
head(df)
df
url <- "https://raw.githubusercontent.com/EyeDen/CUNY_DATA_608/master/module3/data/cleaned-cdc-mortality-1999-2010-2.csv"
df <- read.csv(url)
head(df)
require(shiny)
require(plotly)
url <- "https://raw.githubusercontent.com/EyeDen/CUNY_DATA_608/master/module3/data/cleaned-cdc-mortality-1999-2010-2.csv"
df <- read.csv(url)
head(df)
1092/4430141
1092
4430141/1092
1188 / 4447100
require(shiny)
require(plotly)
df %>%
filter(Year == 1999)
disease <- unique(df$ICD.Chapter)
disease
disease <- as.character(unique(df$ICD.Chapter))
diseease
disease
year <- unique(df$Year)
head(df)
df[df$ICD.Chapter == "Neoplasm" & df$Year == 1999, 5]
df[df$ICD.Chapter == "Neoplasm" & df$Year == 1999, ]
df[df$ICD.Chapter == "Neoplasms" & df$Year == 1999, 5]
1092/4430141 * 100,000
1092/4430141 * 100000
temp <- df
disease <- as.character(unique(df$ICD.Chapter))
year <- unique(df$Year)
temp$USPop <- NA
temp$USDeaths <- NA
temp$USCrude.Rate <- NA
for(d in disease){
for(y in year){
pop <- sum(temp[temp$ICD.Chapter == d & temp$Year == y, 5])
deaths <- sum(temp[temp$ICD.Chapter == d & temp$Year == y, 4])
cr <- (deaths / pop) * 100000
temp[temp$ICD.Chapter == d & temp$Year == y, 7] <- pop
temp[temp$ICD.Chapter == d & temp$Year == y, 8] <- deaths
temp[temp$ICD.Chapter == d & temp$Year == y, 9] <- cr
}
}
head(temp)
library(reshape2)
foo <- df %>%
filter(ICD.Chapter == "Neoplasms", State == "AL")
foo
foo <- temp %>%
filter(ICD.Chapter == "Neoplasms", State == "AL")
foo
foo <- foo[, c(2, 6, 9)]
foo
melt(foo)
foo <- temp %>%
filter(ICD.Chapter == input$cod, state == input$state)
foo <- temp %>%
+     filter(ICD.Chapter == "Neoplasms", State == "AL")
head(temp)
foo <- temp %>%
filter(ICD.Chapter == "Neoplasms", State == "AL")
foo <- foo[, c(2, 3, 6, 9)]
foo <- melt(foo)
foo
head(df)
temp
head(temp)
temp <- df
for(d in disease){
for(y in year){
pop <- sum(df[df$ICD.Chapter == d & df$Year == y, 5])
deaths <- sum(df[df$ICD.Chapter == d & df$Year == y, 4])
cr <- (deaths / pop) * 100000
temp[nrow(temp) + 1, ] <- list(d, "US", y, deaths, pop, cr)
}
}
warnings()
tail(temp)
factor(c(df$State, "US"))
x <- factor(df$State)
x <- factor(x, levels = c(levels(x), "US"))
temp <- df
temp$State <- factor(df$State, levels = c(levels(df$State), "US"))
for(d in disease){
for(y in year){
pop <- sum(df[df$ICD.Chapter == d & df$Year == y, 5])
deaths <- sum(df[df$ICD.Chapter == d & df$Year == y, 4])
cr <- (deaths / pop) * 100000
df[nrow(df) + 1, ] <- list(d, "US", y, deaths, pop, cr)
}
}
warnings()
factor(temp$State)
temp <- df
temp$State <- factor(temp$State, levels = c(levels(temp$State), "US"))
factor(temp$State)
temp <- df
levels(temp$State) <- factor(temp$State, "US")
levels(temp$State)
factor(temp$State)
temp <- df
factor(temp$State) <- factor(temp$State, levels = c(levels(temp$State), "US"))
temp$State <- factor(temp$State, levels = c(levels(temp$State), "US"))
head(temp$State)
for(d in disease){
for(y in year){
pop <- sum(df[df$ICD.Chapter == d & df$Year == y, 5])
deaths <- sum(df[df$ICD.Chapter == d & df$Year == y, 4])
cr <- (deaths / pop) * 100000
temp[nrow(temp) + 1, ] <- list(d, "US", y, deaths, pop, cr)
}
}
tail(temp)
temp <- df
df$State <- factor(df$State, levels = c(levels(df$State), "US"))
for(d in disease){
for(y in year){
pop <- sum(df[df$ICD.Chapter == d & df$Year == y, 5])
deaths <- sum(df[df$ICD.Chapter == d & df$Year == y, 4])
cr <- (deaths / pop) * 100000
df[nrow(df) + 1, ] <- list(d, "US", y, deaths, pop, cr)
}
}
ui2 <- fluidPage(
headerPanel("State Mortality Rate vs National Mortality Rate"),
sidebarPanel(
selectInput('cod', 'Cause of Death', unique(df$ICD.Chapter)),
selectInput('state', 'State', unique(df$State))
),
mainPanel(
plotlyOutput('plot2'),
verbatimTextOutput('')
)
)
server2 <- function(input, output, session){
selectedData <- reactive({
dfSlice <- df %>%
filter(ICD.Chapter == input$cod, State == input$state)
})
foo <- df %>%
filter(ICD.Chapter == input$cod, state == input$state)
foo <- foo[, c(2, 3, 6, 9)]
foo <- melt(foo)
plot_ly(selectedData(), x = ~Year, y = ~Crude.Rate, color = ~State,
type = 'scatter', mode = 'lines')
}
shinyApp(ui = ui2, server = server2)
ui2 <- fluidPage(
headerPanel("State Mortality Rate vs National Mortality Rate"),
sidebarPanel(
selectInput('cod', 'Cause of Death', unique(df$ICD.Chapter)),
selectInput('state', 'State', unique(df$State))
),
mainPanel(
plotlyOutput('plot2'),
verbatimTextOutput('')
)
)
server2 <- function(input, output, session){
selectedData <- reactive({
dfSlice <- df %>%
filter(ICD.Chapter == input$cod, State == input$state)
})
plot_ly(selectedData(), x = ~Year, y = ~Crude.Rate, color = ~State,
type = 'scatter', mode = 'lines')
}
shinyApp(ui = ui2, server = server2)
df %>% filter(ICD.Chapter == "Neoplasms", State == "AL")
df %>% filter(ICD.Chapter == "Neoplasms", State == "AL" & State == "US")
df %>% filter(ICD.Chapter == "Neoplasms", State == "AL" | State == "US")
ui2 <- fluidPage(
headerPanel("State Mortality Rate vs National Mortality Rate"),
sidebarPanel(
selectInput('cod', 'Cause of Death', unique(df$ICD.Chapter)),
selectInput('state', 'State', unique(df$State))
),
mainPanel(
plotlyOutput('plot2'),
verbatimTextOutput('')
)
)
server2 <- function(input, output, session){
selectedData <- reactive({
dfSlice <- df %>%
filter(ICD.Chapter == input$cod, State == input$state | State == "US")
})
plot_ly(selectedData(), x = ~Year, y = ~Crude.Rate, color = ~State,
type = 'scatter', mode = 'lines')
}
shinyApp(ui = ui2, server = server2)
ui2 <- fluidPage(
headerPanel("State Mortality Rate vs National Mortality Rate"),
sidebarPanel(
selectInput('cod', 'Cause of Death', unique(df$ICD.Chapter)),
selectInput('state', 'State', unique(df$State))
),
mainPanel(
plotlyOutput('plot2'),
verbatimTextOutput('')
)
)
server2 <- function(input, output, session){
selectedData <- reactive({
dfSlice <- df %>%
filter(ICD.Chapter == input$cod, State == input$state | State == "US")
})
output$plot2 <- renderPlotlyt({
plot_ly(selectedData(), x = ~Year, y = ~Crude.Rate, color = ~State,
type = 'scatter', mode = 'lines')
})
}
shinyApp(ui = ui2, server = server2)
ui2 <- fluidPage(
headerPanel("State Mortality Rate vs National Mortality Rate"),
sidebarPanel(
selectInput('cod', 'Cause of Death', unique(df$ICD.Chapter)),
selectInput('state', 'State', unique(df$State))
),
mainPanel(
plotlyOutput('plot2'),
verbatimTextOutput('')
)
)
server2 <- function(input, output, session){
selectedData <- reactive({
dfSlice <- df %>%
filter(ICD.Chapter == input$cod, State == input$state | State == "US")
})
output$plot2 <- renderPlotly({
plot_ly(selectedData(), x = ~Year, y = ~Crude.Rate, color = ~State,
type = 'scatter', mode = 'lines')
})
}
shinyApp(ui = ui2, server = server2)
ui2 <- fluidPage(
headerPanel("State Mortality Rate vs National Mortality Rate"),
sidebarPanel(
selectInput('cod', 'Cause of Death', unique(df$ICD.Chapter)),
selectInput('state', 'State', unique(df$State))
),
mainPanel(
plotlyOutput('plot2'),
verbatimTextOutput('')
)
)
server2 <- function(input, output, session){
selectedData <- reactive({
dfSlice <- df %>%
filter(ICD.Chapter == input$cod, State == input$state | State == "US")
})
output$plot2 <- renderPlotly({
plot_ly(selectedData(), x = ~Year, y = ~Crude.Rate, color = State,
type = 'scatter', mode = 'lines')
})
}
shinyApp(ui = ui2, server = server2)
twenty.ten <- df[df$Year == 2010,]
# Rank States
ui1 <- fluidPage(
headerPanel("2010 State Mortality Rankings by Cause"),
sidebarPanel(
selectInput('cod', 'Cause Of Death', unique(twenty.ten$ICD.Chapter))
),
mainPanel(
plotlyOutput('plot1'),
verbatimTextOutput('')
)
)
server1 <- function(input, output, session){
selectedData <- reactive({
dfSlice <- twenty.ten %>%
filter(ICD.Chapter == input$cod)
})
output$plot1 <- renderPlotly({
states <- twenty.ten[twenty.ten$ICD.Chapter == input$cod,]
xform <- list(categoryorder = "array",
categoryarray = states[order(states$Crude.Rate, decreasing = TRUE), 2])
plot_ly(selectedData(), x = ~State, y = order~Crude.Rate, type = 'bar') %>%
layout(xaxis = xform)
})
}
shinyApp(ui = ui1, server = server1)
url <- "https://raw.githubusercontent.com/EyeDen/CUNY_DATA_608/master/module3/data/cleaned-cdc-mortality-1999-2010-2.csv"
df <- read.csv(url)
twenty.ten <- df[df$Year == 2010,]
disease <- as.character(unique(df$ICD.Chapter))
year <- unique(df$Year)
df$State <- factor(df$State, levels = c(levels(df$State), "US"))
for(d in disease){
for(y in year){
pop <- sum(df[df$ICD.Chapter == d & df$Year == y, 5])
deaths <- sum(df[df$ICD.Chapter == d & df$Year == y, 4])
cr <- (deaths / pop) * 100000
df[nrow(df) + 1, ] <- list(d, "US", y, deaths, pop, cr)
}
}
# Rank States
ui1 <- fluidPage(
headerPanel("2010 State Mortality Rankings by Cause"),
sidebarPanel(
selectInput('cod', 'Cause Of Death', unique(twenty.ten$ICD.Chapter))
),
mainPanel(
plotlyOutput('plot1'),
verbatimTextOutput('')
)
)
server1 <- function(input, output, session){
selectedData <- reactive({
dfSlice <- twenty.ten %>%
filter(ICD.Chapter == input$cod)
})
output$plot1 <- renderPlotly({
states <- twenty.ten[twenty.ten$ICD.Chapter == input$cod,]
xform <- list(categoryorder = "array",
categoryarray = states[order(states$Crude.Rate, decreasing = TRUE), 2])
plot_ly(selectedData(), x = ~State, y = order~Crude.Rate, type = 'bar') %>%
layout(xaxis = xform)
})
}
shinyApp(ui = ui1, server = server1)
